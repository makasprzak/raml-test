plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}


logging.captureStandardOutput LogLevel.DEBUG

//cobertura.coverageSourceDirs = sourceSets.main.groovy.srcDirs

group = 'pl.makasprzak'
version = '0.1-alpha'

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: "jacoco"
apply plugin: 'signing'


jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}


configurations.all {
    exclude module: "groovy-all"
    exclude module: "logback-classic"
}

repositories {
    mavenLocal()
    mavenCentral()
}



dependencies {
    compile gradleApi()
    compile group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.10'
    compile group: 'org.raml', name: 'raml-parser-2', version: '1.0.8'
    compile group: 'com.jayway.restassured', name: 'rest-assured', version: '2.9.0'
    testCompile "org.spockframework:spock-core:1.1-groovy-2.4"
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
    testCompile group: 'org.mock-server', name: 'mockserver-netty', version: '3.10.7'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

artifacts {
    archives sourcesJar, javadocJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'RAML Test'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Gradle Task that verifies RESTful API contract against RAML file'
                url 'https://github.com/makasprzak/raml-test'

                scm {
                    connection 'https://github.com/makasprzak/raml-test.git'
                    developerConnection 'https://github.com/makasprzak/raml-test.git'
                    url 'https://github.com/makasprzak/raml-test'
                }

                licenses {
                    license {
                        name 'GNU General Public License v3.0'
                        url 'http://www.gnu.org/licenses/gpl-3.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'makasprzak'
                        name 'Maciej Kasprzak'
                        email 'ceo@makasprzak.pl'
                    }
                }
            }
        }
    }
}
